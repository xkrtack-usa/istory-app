name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: read

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/istory
      DOCKER_TAG: ${{ github.run_number }}

    services:
      mysql:
        image: mysql:8.0
        env:
          # root 계정 비밀번호
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }} 
          # 사용자 계정
          MYSQL_USER: ${{ secrets.MYSQL_USER }} # user
          # 사용자 계정 비밀번호
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          # 사용자 계정 데이터베이스
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }} # istory
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: 1.소스코드 다운로드
        uses: actions/checkout@v4 

      - name: 2.JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 3.개발용 application.yml 생성
        run: |
          cat > src/main/resources/application.yml << EOF
          spring:
            datasource:
              url: ${{ secrets.DATABASE_URL }} # 예dbc:mysql://localhost:3306/istory
              username: ${{ secrets.MYSQL_USER }}
              password: ${{ secrets.MYSQL_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database-platform: org.hibernate.dialect.MySQL8Dialect
              hibernate:
                ddl-auto: update
              show-sql: true
            application:
              name: USER-SERVICE
            jwt:
              issuer: user@gmail.com
              secret_key: study-springboot
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
          EOF

      - name: 4.Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: 5.Build with Gradle
        run: ./gradlew build -x test

      - name: 6.Docker 디렉토리로 jar 파일 복사
        run: |
          mkdir -p xinfra/docker/build/libs/
          cp build/libs/*.jar xinfra/docker/
          ls xinfra/docker/

      - name: 7.Docker Image Build
        run: docker build ./xinfra/docker -t ${{ secrets.DOCKER_USERNAME }}/istory:${{ env.DOCKER_TAG }} -f ./xinfra/docker/Dockerfile

      - name: 8.Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          logout: true

      - name: 9.Docker Push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/istory:${{ env.DOCKER_TAG }}
      
      # 서비스 리포지토리 체크아웃
      - name: 10.서비스 리포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          repository: dangtong-s-inc/istory-service  
          ref: main
          path: .